#ifndef INST_H
#define INST_H

#include "../include/cpu.h"

// Control Instructions
bool HLT(MW1000* cpu);
bool INTR(MW1000* cpu);
bool RET(MW1000* cpu);
bool IRET(MW1000* cpu);
bool JMP_REG(MW1000* cpu);
bool JPZ_REG(MW1000* cpu);
bool JNZ_REG(MW1000* cpu);
bool JNC_REG(MW1000* cpu);
bool JC_REG(MW1000* cpu);
bool CALL_REG(MW1000* cpu);
bool CALLZ_REG(MW1000* cpu);
bool CALLNZ_REG(MW1000* cpu);
bool CALLC_REG(MW1000* cpu);
bool CALLNC_REG(MW1000* cpu);

// Memory Instructions
bool MOV_REG_IMM(MW1000* cpu);
bool MOV_REG_REG(MW1000* cpu);
bool MOV_REG_MEM(MW1000* cpu);
bool MOV_MEM_REG(MW1000* cpu);
bool IN(MW1000* cpu);
bool OUT(MW1000* cpu);

// ALU Instructions
bool ADD(MW1000* cpu);
bool SUB(MW1000* cpu);
bool ADDC(MW1000* cpu);
bool SUBB(MW1000* cpu);
bool MUL(MW1000* cpu);
bool DIV(MW1000* cpu);
bool POW(MW1000* cpu);
bool SHL(MW1000* cpu);
bool SHR(MW1000* cpu);
bool ROTL(MW1000* cpu);
bool ROTR(MW1000* cpu);
bool INC(MW1000* cpu);
bool DEC(MW1000* cpu);
bool AND(MW1000* cpu);
bool OR(MW1000* cpu);
bool NOT(MW1000* cpu);
bool XOR(MW1000* cpu);
bool XNOR(MW1000* cpu);
bool NAND(MW1000* cpu);
bool NOR(MW1000* cpu);
bool COMP(MW1000* cpu);

// FPU Instructions
bool FPADD(MW1000* cpu);
bool FPSUB(MW1000* cpu);
bool FPMUL(MW1000* cpu);
bool FPDIV(MW1000* cpu);
bool FPINC(MW1000* cpu);
bool FPDEC(MW1000* cpu);
bool FPNEG(MW1000* cpu);
bool FPSIN(MW1000* cpu);
bool FPCOS(MW1000* cpu);
bool FPTAN(MW1000* cpu);
bool FPASIN(MW1000* cpu);
bool FPACOS(MW1000* cpu);
bool FPATAN(MW1000* cpu);
bool SPSQRT(MW1000* cpu);
bool FPLOG(MW1000* cpu);
bool FPPOW(MW1000* cpu);
bool CONVIF(MW1000* cpu);
bool CONVFI(MW1000* cpu);

bool (*instructions[])(MW1000*) = {
	HLT, INTR, RET, IRET, JMP_REG, JPZ_REG, JNZ_REG, JNC_REG, JC_REG,                                           // Control Instructions
    CALL_REG, CALLZ_REG, CALLNZ_REG, CALLC_REG, CALLNC_REG,
	MOV_REG_IMM, MOV_REG_REG, MOV_REG_MEM, MOV_MEM_REG, IN, OUT,                 	   	                       	// Memory Instructions
	ADD, SUB, ADDC, SUBB, MUL, DIV, POW, SHL, SHR, ROTL, ROTR, INC, DEC,	                             		// ALU Instructions
	AND, OR, NOT, XOR, XNOR, NAND, NOR, COMP,           					                            		// Logic Instructions
	FPADD, FPSUB, FPMUL, FPDIV, FPINC, FPDEC, FPNEG,						        	                    	// FPU Instructions
	FPSIN, FPCOS, FPTAN, FPASIN, FPACOS, FPATAN, SPSQRT, FPLOG, FPPOW,		        	                    	// Complex FPU Instructions
	CONVIF, CONVFI															        	                       	// Conversions
};

#endif
