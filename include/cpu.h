#ifndef CPU_H
#define CPU_H

#include "bus.h"

#define CPU_VERSION 1000

typedef struct PermTableStruct {
	dword start; // The start of the restricted memory region.
	dword size; // The size of the restricted memory region.
} PermTable;

typedef struct CPUStruct {
	Bus* bus;
	PermTable permTables[8]; // 4 permission tables.
	word ioPerms; // Defines if the cpu can access this I/O register inside of user mode.

	// Registers
	dword gpio[16]; // 16 general perpose io ports.
	dword gpregs[16]; // 16 general perpose registers.
	dword pc; // The program counter.
	dword sp; // The pointer to the top of the stack.
	dword sb; // The pointer to the limit of the stack.
	dword base; // Base of addresses.
	dword intrAddr;
	bool perm; // If false, the cpu is in supervisor mode, otherwise, it is in user mode.
	bool interupt; // If true, the cpu is about to interupt after finishing the current instruction.

	// Flags
	bool cFlag; // Carry flag.
	bool sFlag; // If true, the current interupt was called through software.
	bool erFlag; // If true, the current interupt was called because of an error.
	bool lFlag; // Less than flag.
	bool eFlag; // Equal to flag.
	bool gFlag; // Greater than flag.
	bool rFlag; // If true, accessing memory is relative to the base address.
} CPU;

CPU* CreateCPU(Bus* bus);
void PushInternal(CPU* cpu, dword data);
dword PopInternal(CPU* cpu);
bool HasPermission(CPU* cpu, dword addr);
bool PWriteBus(CPU* cpu, dword addr, dword value, byte bytes);

#endif